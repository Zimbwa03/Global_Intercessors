import { readFileSync } from 'fs';
import { supabaseAdmin } from './server/supabase.js';

async function executeAnalyticsSetup() {
    try {
        console.log('üöÄ Starting Analytics System Setup...');
        console.log('üìä Executing complete analytics system in Supabase...');
        
        // Read the SQL file
        const sqlContent = readFileSync('complete-analytics-setup.sql', 'utf8');
        console.log(`‚úÖ SQL file loaded (${sqlContent.length} characters)`);
        
        // Execute the SQL directly using the server's Supabase connection
        console.log('üîÑ Executing analytics setup...');
        const { data, error } = await supabaseAdmin.rpc('exec_sql', { sql_query: sqlContent });
        
        if (error) {
            console.error('‚ùå Error executing SQL:', error.message);
            return false;
        }
        
        console.log('‚úÖ SQL executed successfully');
        console.log('\nüéâ ANALYTICS SYSTEM SETUP COMPLETE!');
        console.log('üìä Successfully created:');
        console.log('   ‚Ä¢ Analytics cache tables');
        console.log('   ‚Ä¢ User daily summary views');
        console.log('   ‚Ä¢ Slot coverage summary');
        console.log('   ‚Ä¢ Zoom meeting summary');
        console.log('   ‚Ä¢ Real-time analytics functions');
        console.log('   ‚Ä¢ Weekly analytics functions');
        console.log('   ‚Ä¢ User-specific analytics functions');
        console.log('   ‚Ä¢ Zoom analytics functions');
        console.log('   ‚Ä¢ Performance metrics functions');
        console.log('   ‚Ä¢ Data export functions');
        console.log('   ‚Ä¢ Current streak calculation function');
        console.log('   ‚Ä¢ Performance indexes');
        console.log('   ‚Ä¢ Row Level Security policies');
        
        console.log('\nüîß Your admin dashboard now has full analytics functionality!');
        console.log('   ‚Ä¢ Real-time attendance tracking');
        console.log('   ‚Ä¢ Zoom integration analytics');
        console.log('   ‚Ä¢ User performance monitoring');
        console.log('   ‚Ä¢ Weekly performance reports');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Fatal error:', error.message);
        return false;
    }
}

// Run the setup
executeAnalyticsSetup().then(success => {
    if (success) {
        console.log('\n‚úÖ Analytics setup completed successfully!');
        process.exit(0);
    } else {
        console.log('\n‚ùå Analytics setup failed!');
        process.exit(1);
    }
}).catch(error => {
    console.error('‚ùå Unexpected error:', error);
    process.exit(1);
});


